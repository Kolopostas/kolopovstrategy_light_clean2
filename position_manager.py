from __future__ import annotations

import os
import time
from typing import Any, Dict, Optional

from core.bybit_exchange import create_exchange, normalize_symbol
from core.indicators import atr_latest_from_ohlcv
from core.market_info import adjust_qty_price
from core.trade_log import append_trade_event


def _calc_order_qty(
    balance_usdt: float, price: float, risk_fraction: float, leverage: int
) -> float:
    """
    Deprecated helper (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å ATR‚Äë—Ä–∏—Å–∫–æ–º).

    –û—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏. –°–µ–π—á–∞—Å —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è
    —á–µ—Ä–µ–∑ ATR –∏ –ø—Ä–æ—Ü–µ–Ω—Ç —Ä–∏—Å–∫–∞ –≤ open_position().
    """
    notional = max(0.0, balance_usdt) * max(0.0, risk_fraction) * max(1, leverage)
    return (notional / price) if price > 1e-12 else 0.0


def _wait_fill(ex, sym: str, order_id: str, timeout_s: int = 25) -> Dict[str, Any]:
    """
    –û–∂–∏–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞ –¥–æ timeout_s.
    –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã. –ï—Å–ª–∏ –±–∏—Ä–∂–∞ –Ω–µ –¥–∞–ª–∞ —Ñ–∏–Ω–∞–ª ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–æ–ª–±—ç–∫ 'placed'.
    """
    t0 = time.time()
    last: Dict[str, Any] = {}
    while time.time() - t0 < timeout_s:
        try:
            o = ex.fetch_order(order_id, sym) or {}
            last = o or last
            st = str((o.get("status") or "")).lower()
            print(f"[FILL] id={order_id} status={st or 'n/a'} ts={int(time.time()-t0)}s")
            # —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã —É ccxt: closed / canceled / rejected
            if st in ("closed", "canceled", "rejected", "open"):
                # 'open' ‚Äî —Ç–æ–∂–µ –æ–∫: –æ—Ä–¥–µ—Ä/–ø–æ–∑–∏—Ü–∏—è –∞–∫—Ç–∏–≤–Ω—ã
                return o
        except Exception as _e:
            # —Å–µ—Ç—å/—Ç–∞–π–º–∞—É—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π; –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å
            pass
        time.sleep(0.5)

    # –§–æ–ª–±—ç–∫: –±–∏—Ä–∂–∞ –Ω–µ —É—Å–ø–µ–ª–∞ –æ—Ç–≤–µ—Ç–∏—Ç—å, –Ω–æ id –∏–∑–≤–µ—Å—Ç–µ–Ω
    if last:
        return last
    return {"status": "placed", "id": order_id, "symbol": sym}


def open_position(
    symbol: str, side: str, price: Optional[float] = None
) -> Dict[str, Any]:
    """
    MARKET‚Äë–æ—Ä–¥–µ—Ä —Å TP/SL –∏ ATR‚Äë—Ä–∞—Å—á—ë—Ç–æ–º. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç 'leverage not modified' (110043),
    –ø–æ–º–µ—á–∞–µ—Ç 10001 –∫–∞–∫ retryable. –õ–æ–≥–∏—Ä—É–µ—Ç: order_placed / order_filled / order_error.
    DRY_RUN=1 ‚Äî –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ä–¥–µ—Ä–∞.
    """
    # DRY mode: –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    if os.getenv("DRY_RUN", "").strip() == "1":
        return {"status": "dry", "reason": "DRY_RUN=1", "symbol": symbol, "side": side}

    ex = create_exchange()
    sym = normalize_symbol(symbol)

    # –ë–∞–ª–∞–Ω—Å
    bal = ex.fetch_balance()
    usdt = float(bal.get("USDT", {}).get("free", 0.0) or 0.0)

    # –¶–µ–Ω–∞ (–µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–ª–∏)
    if price is None:
        t = ex.fetch_ticker(sym)
        price = float(t.get("last") or t.get("close") or 0.0)

    # –û–∫—Ä—É–≥–ª—è–µ–º —Ü–µ–Ω—É –≤—Ö–æ–¥–∞ –ø–æ —Ç–∏–∫‚Äë—à–∞–≥—É
    px = float(ex.price_to_precision(sym, price))

    # –°—Ç–æ—Ä–æ–Ω–∞ –æ—Ä–¥–µ—Ä–∞
    order_side = "buy" if side.lower() == "long" else "sell"

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–µ—á–æ (110043 = already set ‚Äî –Ω–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –æ—à–∏–±–∫–æ–π)
    leverage = int(os.getenv("LEVERAGE", "3"))
    try:
        ex.set_leverage(leverage, sym)
    except Exception as e:
        if "110043" not in str(e):
            print("‚ö†Ô∏è set_leverage:", e)

    # --- ATR‚Äë–±–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∏—Å–∫ ---
    tf = os.getenv("TIMEFRAME", "5m")
    atr_period = int(os.getenv("ATR_PERIOD", "14"))
    sl_mult = float(os.getenv("SL_ATR_MULT", "1.8"))
    tp_mult = float(os.getenv("TP_ATR_MULT", "2.2"))
    risk_pct = float(os.getenv("RISK_PCT", "0.007"))  # 0.7% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞

    # –ü–æ–ª—É—á–∞–µ–º ATR –¥–ª—è —Å—Ç–æ–ø‚Äë–¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
    ohlcv = ex.fetch_ohlcv(sym, timeframe=tf, limit=max(atr_period + 1, 200))
    atr, _last_close = atr_latest_from_ohlcv(ohlcv, period=atr_period)

    # –î–∏—Å—Ç–∞–Ω—Ü–∏—è SL –æ—Ç —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞
    stop_dist = max(atr * sl_mult, 1e-9)

    # –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (–≤ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–µ) = —Ä–∏—Å–∫/—Å—Ç–æ–ø‚Äë–¥–∏—Å—Ç–∞–Ω—Ü–∏—è
    risk_usdt = max(1e-6, usdt * risk_pct)
    qty_raw = risk_usdt / stop_dist if stop_dist > 0 else 0.0

    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Ü–µ–Ω—É –ø–æ–¥ —à–∞–≥ –ª–æ—Ç–∞/—Ç–∏–∫
    qty, px, _ = adjust_qty_price(sym, qty_raw, px)
    if qty <= 0:
        return {
            "status": "error",
            "reason": "qty<=0 after adjust",
            "balance": usdt,
            "qty_raw": qty_raw,
        }

    # TP/SL –ø–æ ATR
    if order_side == "buy":
        sl_price = float(ex.price_to_precision(sym, px - stop_dist))
        tp_price = float(ex.price_to_precision(sym, px + tp_mult * atr))
    else:
        sl_price = float(ex.price_to_precision(sym, px + stop_dist))
        tp_price = float(ex.price_to_precision(sym, px - tp_mult * atr))

    params = {"takeProfit": tp_price, "stopLoss": sl_price}

    # –û—Ç–ª–∞–¥–∫–∞
    print(
        "üîé DEBUG ORDER:",
        {
            "symbol": sym,
            "side": order_side,
            "qty_raw": qty_raw,
            "qty": qty,
            "entry_price": px,
            "TP": tp_price,
            "SL": sl_price,
            "lev": leverage,
        },
    )

    try:
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ
        o = ex.create_order(
            sym, type="market", side=order_side, amount=qty, price=None, params=params
        )

        # –õ–æ–≥: —Ä–∞–∑–º–µ—â—ë–Ω
        try:
            append_trade_event(
                {
                    "ts": time.time(),
                    "event": "order_placed",
                    "symbol": sym,
                    "side": order_side,
                    "qty": qty,
                    "price": px,
                    "tp": tp_price,
                    "sl": sl_price,
                    "order_id": o.get("id") or o.get("orderId"),
                    "link_id": o.get("clientOrderId")
                    or o.get("orderLinkId")
                    or (o.get("info", {}) or {}).get("orderLinkId"),
                    "mode": "LIVE",
                }
            )
        except Exception as _e:
            print("[WARN] trade-log placed:", _e)

        oid = o.get("id") or o.get("orderId")
        if oid:
            o = _wait_fill(ex, sym, oid)
        else:
            # —Ä–µ–¥–∫–∏–π —Å–ª—É—á–∞–π ‚Äî ccxt –Ω–µ –≤–µ—Ä–Ω—É–ª id; –≤—Å—ë —Ä–∞–≤–Ω–æ –≤–µ—Ä–Ω—ë–º —Ñ–∞–∫—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            o = {"status": (o.get("status") or "placed"), "symbol": sym}

        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏ –º—è–≥–∫–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        st_norm = str((o.get("status") or "")).lower()
        if st_norm not in ("closed", "open", "canceled", "rejected", "placed"):
            print(f"[WARN] unexpected order status: {st_norm or 'n/a'} -> treating as 'placed'")

        return {
            "status": st_norm or "placed",
            "order": o,
            "qty": qty,
            "price": px,
            "tp": tp_price,
            "sl": sl_price,
            "balance": usdt,
        }

    except Exception as e:
        msg = str(e)

        # –õ–æ–≥: –æ—à–∏–±–∫–∞
        try:
            append_trade_event(
                {
                    "ts": time.time(),
                    "event": "order_error",
                    "symbol": sym,
                    "side": order_side,
                    "qty": qty,
                    "price": px,
                    "tp": tp_price,
                    "sl": sl_price,
                    "order_id": None,
                    "link_id": None,
                    "mode": "LIVE",
                    "extra": msg,
                }
            )
        except Exception as _e:
            print("[WARN] trade-log error:", _e)

        # –ö–æ–¥—ã Bybit
        if "10001" in msg:
            return {
                "status": "retryable",
                "reason": "10001 invalid request",
                "error": msg,
            }
        if "110043" in msg:
            return {
                "status": "ok_with_warning",
                "warning": "110043 leverage not modified",
                "qty": qty,
            }

        return {"status": "error", "error": msg, "qty": qty, "price": px}
