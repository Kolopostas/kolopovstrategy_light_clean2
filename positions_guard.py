import argparse
import os
import sys
import tempfile
import time
from contextlib import contextmanager, nullcontext
from datetime import datetime, timezone
from pathlib import Path

from core.bybit_exchange import create_exchange, normalize_symbol
from core.env_loader import load_and_check_env
from core.indicators import atr_latest_from_ohlcv, compute_snapshot
from core.market_info import (
    cancel_open_orders,
    get_balance,
    get_open_orders,
    get_symbol_price,
    has_open_position,
)
from core.predict import predict_trend, train_model_for_pair
from core.trailing_stop import (
    compute_atr,
    set_stop_loss_only,
    update_trailing_for_symbol,
    verify_trailing_state,
)
from position_manager import open_position

# --- –ú–∞—è–∫ —Å—Ç–∞—Ä—Ç–∞ –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –Ω–µ–±–µ—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è ---
try:
    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–µ–±–µ—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π stdout –≤ –ª—é–±–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
    if hasattr(sys.stdout, "reconfigure"):
        sys.stdout.reconfigure(line_buffering=True)
    os.environ.setdefault("PYTHONUNBUFFERED", "1")
    # –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –ª–æ–≥–æ–≤ (–Ω–∞ Railway —Ç–æ–∂–µ –ø–æ–ª–µ–∑–Ω–æ)
    Path("logs").mkdir(exist_ok=True)
    with open("logs/boot.log", "a", encoding="utf-8") as f:
        f.write(
            f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] BOOT: positions_guard.py loaded, cwd={os.getcwd()}\n"
        )
    print("BOOT: positions_guard loaded", flush=True)
except Exception:
    pass

# –ü–∞–º—è—Ç—å –æ —Ç–æ–º, —á—Ç–æ –±–µ–∑—É–±—ã—Ç–æ–∫ —É–∂–µ –ø–µ—Ä–µ–≤–µ–¥—ë–Ω (–ø–æ –ø–∞—Ä–µ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é)
_BE_DONE: dict = {}


# --- Heartbeat –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: –¥–æ–±–∞–≤—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é ---
_last_hb = 0.0


def _heartbeat(msg: str = "HB"):
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø–µ—á–∞—Ç–∞–µ—Ç —Ö–∞—Ä—Ç–±–∏—Ç, —á—Ç–æ–±—ã –≤ Railway –±—ã–ª–∏ –∂–∏–≤—ã–µ –ª–æ–≥–∏."""
    global _last_hb
    now = time.time()
    if now - _last_hb >= 15:  # –∫–∞–∂–¥—ã–µ ~15 —Å–µ–∫—É–Ω–¥
        _last_hb = now
        print(f"{time.strftime('%H:%M:%S')} {msg}", flush=True)
        try:
            with open("logs/boot.log", "a", encoding="utf-8") as f:
                f.write(f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] {msg}\n")
        except Exception:
            pass


def _has_trailing(exchange, symbol: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ —É–∂–µ —Ç—Ä–µ–π–ª–∏–Ω–≥ –ø–æ —Å–∏–º–≤–æ–ª—É. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç verify_trailing_state().
    """
    try:
        st = verify_trailing_state(exchange, symbol)
        rows = (st.get("result", {}) or {}).get("list") or []
        for r in rows:
            ts = str(r.get("trailingStop") or "").strip()
            if ts not in ("", "0", "0.0", "None"):
                return True
    except Exception:
        pass
    return False


def _maybe_breakeven(exchange, symbol: str, entry_px: float, side: str) -> None:
    """
    –ü–µ—Ä–µ–Ω–æ—Å–∏—Ç —Å—Ç–æ–ø-–ª–æ—Å—Å –≤ –±–µ–∑—É–±—ã—Ç–æ–∫, –µ—Å–ª–∏ —Ü–µ–Ω–∞ –ø—Ä–æ—à–ª–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ.
    –£—Å–ª–æ–≤–∏—è –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –±–µ—Ä—ë–º –∏–∑ .env: ENABLE_BREAKEVEN, BE_MODE,
    BE_ATR_K, BE_TRIGGER_PCT, BE_OFFSET_PCT.
    """
    if os.getenv("ENABLE_BREAKEVEN", "1") != "1":
        return

    sid = (side or "").lower()
    key = (symbol, sid)
    if _BE_DONE.get(key):
        return

    be_mode = os.getenv("BE_MODE", "atr").lower()  # "atr" | "pct"
    be_offset_pct = float(os.getenv("BE_OFFSET_PCT", "0.0005"))

    # –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
    cur = get_symbol_price(symbol)
    should_move = False

    if be_mode == "atr":
        k = float(os.getenv("BE_ATR_K", "0.5"))
        tf = os.getenv("ATR_TIMEFRAME", "5m")
        per = int(os.getenv("ATR_PERIOD", "14"))
        atr, _ = compute_atr(exchange, symbol, tf, per)
        if atr > 0:
            if sid in ("long", "buy"):
                should_move = cur >= entry_px + k * atr
            else:
                should_move = cur <= entry_px - k * atr
    else:
        trig = float(os.getenv("BE_TRIGGER_PCT", "0.004"))
        if sid in ("long", "buy"):
            should_move = cur >= entry_px * (1 + trig)
        else:
            should_move = cur <= entry_px * (1 - trig)

    if not should_move:
        return

    if sid in ("long", "buy"):
        be_price = float(
            exchange.price_to_precision(symbol, entry_px * (1 + be_offset_pct))
        )
    else:
        be_price = float(
            exchange.price_to_precision(symbol, entry_px * (1 - be_offset_pct))
        )

    print("[BE] move SL to", be_price)
    try:
        set_stop_loss_only(exchange, symbol, be_price)
        _BE_DONE[key] = True
    except Exception as e:
        print("[BE_ERR]", e)


def apply_trailing_after_entry(sym: str, signal: str, res: dict, dry_run: bool) -> None:
    """
    –í–µ—à–∞–µ—Ç —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç SL –≤ –±–µ–∑—É–±—ã—Ç–æ–∫ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç update_trailing_for_symbol –∏ _maybe_breakeven().
    """
    if (
        dry_run
        or not isinstance(res, dict)
        or res.get("status") in {"error", "retryable"}
    ):
        print(
            "[TS_SKIP]",
            {
                "dry_run": dry_run,
                "status": res.get("status") if isinstance(res, dict) else "?",
            },
        )
        return

    try:
        entry_px = float(res.get("price") or 0.0)
        if entry_px <= 0:
            try:
                entry_px = get_symbol_price(sym)
            except Exception:
                ex_tmp = create_exchange()
                tkr = ex_tmp.fetch_ticker(sym)
                entry_px = float(tkr.get("last") or tkr.get("close") or 0.0)

        ex_ts = create_exchange()

        if os.getenv("USE_TRAILING_STOP", "1") in ("1", "true", "True"):
            if not _has_trailing(ex_ts, sym):
                print("[TS_CALL]", {"symbol": sym, "entry": entry_px, "side": signal})
                ts_resp = update_trailing_for_symbol(ex_ts, sym, entry_px, signal)
                print("[TS_OK]", ts_resp)
            else:
                print("[TS_SKIP] already has trailing for", sym)

            _maybe_breakeven(ex_ts, sym, entry_px, signal)
        else:
            print("[TS_SKIP] trailing disabled by USE_TRAILING_STOP")
    except Exception as e:
        print("[TS_ERR]", e)


@contextmanager
def single_instance_lock(name: str = "positions_guard.lock"):
    """
    –ü—Ä–µ–¥–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–æ–ø–∏–π —Å–∫—Ä–∏–ø—Ç–∞.
    –°–æ–∑–¥–∞—ë—Ç —Ñ–∞–π–ª-–∑–∞–º–æ–∫ –≤ /tmp, —É–¥–∞–ª—è–µ—Ç –µ–≥–æ –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏.
    """
    path = os.path.join(tempfile.gettempdir(), name)
    if os.path.exists(path):
        raise RuntimeError(f"Already running: {path}")
    try:
        open(path, "w").close()
        yield
    finally:
        try:
            os.remove(path)
        except Exception as e:
            print(f"[WARN] lock cleanup failed: {e}")


def ensure_models_exist(pairs, timeframe="15m", limit=2000, model_dir="models"):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–µ–ª–µ–π ML –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä, –∫–æ—Ç–æ—Ä—ã–µ –º—ã —Ç–æ—Ä–≥—É–µ–º.
    –ï—Å–ª–∏ –º–æ–¥–µ–ª–∏ –Ω–µ—Ç ‚Äì –æ–±—É—á–∞–µ–º —Å –Ω—É–ª—è (train_model_for_pair).
    """
    os.makedirs(model_dir, exist_ok=True)
    missing = []
    for p in pairs:
        key = normalize_symbol(p).upper().replace("/", "").replace(":USDT", "")
        mpath = os.path.join(model_dir, f"model_{key}.pkl")
        if not os.path.exists(mpath):
            missing.append(p)
    if missing:
        print(f"üß† –ù–µ—Ç –º–æ–¥–µ–ª–µ–π –¥–ª—è: {missing} ‚Äî –æ–±—É—á–∞–µ–º...")
        for p in missing:
            try:
                train_model_for_pair(
                    p, timeframe=timeframe, limit=limit, model_dir=model_dir
                )
            except Exception as e:
                print(f"‚ö†Ô∏è {p}: {e}")


def main():
    load_and_check_env()

    parser = argparse.ArgumentParser()
    parser.add_argument("--once", action="store_true", help="–û–¥–∏–Ω –ø—Ä–æ—Ö–æ–¥ –∏ –≤—ã—Ö–æ–¥")
    parser.add_argument("--pair", type=str)
    parser.add_argument(
        "--threshold", type=float, default=float(os.getenv("CONF_THRESHOLD", "0.65"))
    )
    parser.add_argument(
        "--no-lock", action="store_true", help="–ó–∞–ø—É—Å–∫ –±–µ–∑ single-instance lock"
    )
    parser.add_argument("--timeframe", type=str, default=os.getenv("TIMEFRAME", "5m"))
    parser.add_argument(
        "--limit", type=int, default=int(os.getenv("TRAIN_LIMIT", "3000"))
    )
    parser.add_argument("--live", action="store_true", help="–†–∞–∑—Ä–µ—à–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Å–¥–µ–ª–∫–∏")
    parser.add_argument(
        "--autotrain",
        action="store_true",
        help="–û–±—É—á–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –º–æ–¥–µ–ª–∏ –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º",
    )
    parser.add_argument(
        "--auto-cancel",
        action="store_true",
        help="–ê–≤—Ç–æ–æ—Ç–º–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º",
    )
    parser.add_argument(
        "--no-pyramid", action="store_true", help="–ù–µ –≤—Ö–æ–¥–∏—Ç—å, –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è"
    )
    args = parser.parse_args()

    pairs = (
        [args.pair]
        if args.pair
        else [s.strip() for s in os.getenv("PAIRS", "").split(",") if s.strip()]
    )
    if not pairs:
        raise ValueError("PAIRS –ø—É—Å—Ç ‚Äî –∑–∞–ø–æ–ª–Ω–∏ –≤ .env")

    min_balance = float(os.getenv("MIN_BALANCE_USDT", "5"))
    dry_run = not args.live

    print("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Kolopovstrategy guard ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
    print("‚è± ", datetime.now(timezone.utc).isoformat())
    print(f"Mode: {'LIVE' if not dry_run else 'DRY'} | Threshold={args.threshold}")
    print("üìà Pairs:", ", ".join(pairs))

    if args.autotrain:
        ensure_models_exist(pairs, timeframe=args.timeframe, limit=args.limit)

    lock_ctx = nullcontext() if args.no_lock else single_instance_lock()
    with lock_ctx:
        print("DEBUG PROXY_URL:", os.getenv("PROXY_URL"))
        usdt = get_balance("USDT")
        print(f"üí∞ –ë–∞–ª–∞–Ω—Å USDT: {usdt:.2f}")
        if usdt < min_balance:
            print(f"‚õî –ë–∞–ª–∞–Ω—Å –Ω–∏–∂–µ –º–∏–Ω–∏–º—É–º–∞ ({min_balance} USDT) ‚Äî —Ç–æ—Ä–≥–æ–≤–ª—è –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
            return

        # DRY_RUN –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è ‚Äì –¥–≤–æ–π–Ω–æ–π –ø—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å
        if dry_run:
            os.environ["DRY_RUN"] = "1"
        else:
            os.environ.pop("DRY_RUN", None)

        for p in pairs:
            sym = normalize_symbol(p)
            price = get_symbol_price(sym)
            _heartbeat(f"cycle {p}")

            # 1) –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞?
            opened = get_open_orders(sym)
            if opened:
                print(f"‚è≥ –ï—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ –ø–æ {sym}: {len(opened)}")
                if args.auto_cancel:
                    n = cancel_open_orders(sym)
                    print(f"üßπ –û—Ç–º–µ–Ω–∏–ª {n} –æ—Ä–¥–µ—Ä(–æ–≤).")
                else:
                    print(
                        "‚è∏ –ü—Ä–æ–ø—É—Å–∫–∞—é –≤—Ö–æ–¥ (–∑–∞–ø—É—Å—Ç–∏ —Å --auto-cancel, —á—Ç–æ–±—ã —á–∏—Å—Ç–∏—Ç—å —Ö–≤–æ—Å—Ç—ã)."
                    )
                    continue

            # 2) –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–∑–∏—Ü–∏—è?
            if args.no_pyramid and has_open_position(sym):
                print(
                    f"üèï –£–∂–µ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è –ø–æ {sym} ‚Äî –ø–∏—Ä–∞–º–∏–¥–∏–Ω–≥ –≤—ã–∫–ª—é—á–µ–Ω (--no-pyramid). –ü—Ä–æ–ø—É—Å–∫."
                )
                continue

            # 3) –ü—Ä–æ–≥–Ω–æ–∑
            pred = predict_trend(sym, timeframe=args.timeframe)
            signal = str(pred.get("signal", "hold")).lower()
            conf = float(pred.get("confidence", 0.0))

            # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            if os.getenv("DEBUG_INDICATORS", "0") == "1":
                try:
                    snap = compute_snapshot(
                        sym, timeframe=args.timeframe, limit=max(args.limit, 200)
                    )
                    print("[IND]", sym, snap)
                except Exception as _e:
                    print("[IND_ERR]", _e)

            print(
                f"üîÆ {sym} @ {price:.4f} ‚Üí signal={signal} conf={conf:.2f} proba={pred.get('proba', {})}"
            )

            # 4) –£—Å–ª–æ–≤–∏—è –≤—Ö–æ–¥–∞
            if dry_run or signal not in ("long", "short") or conf < args.threshold:
                print("‚è∏ –£—Å–ª–æ–≤–∏—è –≤—Ö–æ–¥–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã (–∏–ª–∏ DRY).")
                continue

            res = open_position(sym, side=signal)
            print("üßæ –†–µ–∑—É–ª—å—Ç–∞—Ç:", res)
            apply_trailing_after_entry(sym, signal, res, dry_run)

            # –ë–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º: apply_trailing_after_entry() —Å—Ç–∞–≤–∏—Ç —Ç—Ä–µ–π–ª –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ BE

            if __name__ == "__main__":
                # –ú–∏–Ω–∏-–∫—Ä—é—á–æ–∫, —á—Ç–æ–±—ã —è–≤–Ω–æ —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ä—Ç –¥–∞–∂–µ –ø—Ä–∏ —Ä–∞–Ω–Ω–∏—Ö –ø–∞–¥–µ–Ω–∏—è—Ö
                try:
                    print(">>> starting positions_guard", flush=True)
                except Exception:
                    pass
                main()
